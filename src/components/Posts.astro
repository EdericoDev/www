---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Post from './Post.astro';

interface Props {
  currentPage?: number;
  tag?: string | null;
  searchQuery?: string | null;
}

type Tag = string;

type BlogPost = CollectionEntry<'myblog'> & {
  data: {
    title: string;
    description: string;
    pubDate: string;
    tags: Tag[];
  };
  slug: string;
  body: string;
};

const { currentPage = 1, tag, searchQuery } = Astro.props;
const POSTS_PER_PAGE = 10;

const allPosts = await getCollection('myblog');

let filteredPosts = allPosts.sort((a: BlogPost, b: BlogPost) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

if (tag) {
  filteredPosts = filteredPosts.filter((post: BlogPost) => 
    post.data.tags && post.data.tags.includes(tag)
  );
}

if (searchQuery) {
  filteredPosts = filteredPosts.filter((post: BlogPost) => 
    post.data.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    post.data.description.toLowerCase().includes(searchQuery.toLowerCase())
  );
}

const calculateReadingTime = (content: string): number => {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
};

const start = (currentPage - 1) * POSTS_PER_PAGE;
const end = start + POSTS_PER_PAGE;
const paginatedPosts = filteredPosts.slice(start, end);
---

<div class="not-prose flex flex-col gap-4">
  {paginatedPosts.map((post: BlogPost) => (
    <Post
      href={`/myblog/${post.slug}`}
      title={post.data.title}
      description={post.data.description}
      tags={post.data.tags || []}
      pubDate={post.data.pubDate}
      readingTime={calculateReadingTime(post.body)}
    />
  ))}
</div>